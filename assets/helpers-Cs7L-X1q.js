class a extends Error{}a.prototype.name="InvalidTokenError";function c(e){return decodeURIComponent(atob(e).replace(/(.)/g,(t,r)=>{let n=r.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n}))}function i(e){let t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return c(t)}catch{return atob(t)}}function d(e,t){if(typeof e!="string")throw new a("Invalid token specified: must be a string");t||(t={});const r=t.header===!0?0:1,n=e.split(".")[r];if(typeof n!="string")throw new a(`Invalid token specified: missing part #${r+1}`);let s;try{s=i(n)}catch(o){throw new a(`Invalid token specified: invalid base64 for part #${r+1} (${o.message})`)}try{return JSON.parse(s)}catch(o){throw new a(`Invalid token specified: invalid json for part #${r+1} (${o.message})`)}}const l=e=>typeof e=="string"?e:Array.isArray(e)?e[0]:e,f=()=>{const e=localStorage.getItem("token");if(!e)return!1;try{const t=d(e),r=Date.now()/1e3;if(t.exp&&t.exp<r)return!1}catch{return!1}return!0};export{l as g,f as i,d as j};
